
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     Notes And Weblinks On Assorted (Some Potentially Catastrophic) Optimizations

  -- [Force Intrinsic Function Calls]
		DESCRIPTION:   Explicitly force an intrinsic implementation for a function to be used in place of the typical C/C++ runtime library's
		                   implementation*. Will limit the number of available platforms/architectures the code will execute properly                       *Note that some cstdlib or 
						   under (unless both pragmas to enabled/disable intrinsic are ignored) at the benefit of having a most-likely
						   several-orders-of-magnitude faster implementation [depending of size/nature of operation performed with function
						   call].					   
		DETAILS:       Must be enabled using a call to 
		                   '#pragma incrinsic( intrinsic_func )'
		               After its use is  a call to 
		     '#pragma function( intrinsic func )' 
		    to reset implementation to non-intrinsic default]
				
		 
				// use intrinsic forms of memset and strlen
                #pragma intrinsic(memset, strlen)


		 
		 See: [Example Usage] https://docs.microsoft.com/en-us/cpp/preprocessor/function-c-cpp?view=vs-2017
		      [Available Intrinsics] https://docs.microsoft.com/en-us/cpp/preprocessor/intrinsic?view=vs-2017


 -- Can tell MSVC compiler that it can assume a certain condition to always be met which
             can lead to better optimized code. However, telling the compiler a lie will be very very very
             catastrophic.
                See:   https://docs.microsoft.com/en-us/cpp/intrinsics/assume?view=vs-2017



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   End Section on Optimizations   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





// References and notes on build systems:
//
//
//                                            MSVC uses MSBuild     
//
//          MSBuild References:
//                      (official)  https://docs.microsoft.com/en-us/cpp/build/msbuild-visual-cpp?view=vs-2017
//                      (wikipedia) https://en.wikipedia.org/wiki/MSBuild
//        
//             Quote from wikipedia explaining 'Target':       
//                               "A Target contains a set of tasks for MSBuild to execute. The focus of MSBuild is the
//                                result Target specified when invoking MSBuild with the project file. This is because a
//                                Project may contain several Target entries, each executed sequentially (and
//                                conditionally). Subsequent dependent Targets are executed before the requested Target.
//                                The execution flow of the current Target can be directed using the following attributes: 
//                                     Condition,
//                                     BeforeTargets,
//                                     AfterTargets, & 
//                                     DependsOnTargets. 
//                                Each Target may be self-contained with the necessary Tasks to complete itself. A Target is
//                                typically an action executed on a file, set of files or directory. "
// 
//
//


  Notes and information pertaining to potential Project Configuation, Properties and Settings 

  /////////////////////////////////
// Working with Project Properties //
  /////////////////////////////////
  https://docs.microsoft.com/en-us/cpp/ide/working-with-project-properties?view=vs-2017

  /////////////////////////////
// Compiler Optimization flags //
  /////////////////////////////

 /Ob{0|1|2}   (affects 'inline', '__inline', and '__forceinline' behavior, will be set to /Ob2
                   if '/Ox' [Enable Most Speed Optimizations]  is used)
https://docs.microsoft.com/en-us/cpp/build/reference/ob-inline-function-expansion?view=vs-2017

 /Ox
  https://docs.microsoft.com/en-us/cpp/build/reference/ox-full-optimization?view=vs-2017
